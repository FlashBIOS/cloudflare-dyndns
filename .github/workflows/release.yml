name: Create Release on Tag

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Generate Changelog with Release Drafter
        uses: release-drafter/release-drafter@v5
        id: generate_changelog
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: v1-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ github.run_id }}
          restore-keys: |
            v1-${{ runner.os }}-go-

      - name: Run go mod tidy
        run: go mod tidy

      - name: Build Release Artifacts
        run: make release-all

      - name: Archive Binaries per OS/Arch
        env:
          BINARY_NAME: cloudflare-dyndns
        run: |
          for os in $(ls bin); do
            for arch in $(ls bin/$os); do
              if [ "$os" = "windows" ]; then
                echo "Archiving for $os $arch as zip"
                # Append .exe for windows
                zip -j "${os}-${arch}.zip" "bin/$os/$arch/${BINARY_NAME}.exe"
              else
                echo "Archiving for $os $arch as tar.gz"
                tar -C "bin/$os/$arch" -czvf "${os}-${arch}.tar.gz" "$BINARY_NAME"
              fi
            done
          done

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: |
            ${{ steps.generate_changelog.outputs.body }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          upload_url="${{ steps.create_release.outputs.upload_url }}"
          upload_url="${upload_url%\{*}"
          for asset in *.tar.gz *.zip; do
            if [ -f "$asset" ]; then
              echo "Uploading $asset"
              if [[ "$asset" == *.zip ]]; then
                content_type="application/zip"
              else
                content_type="application/gzip"
              fi
              encoded_name=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$asset'''))")
              curl --fail -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: ${content_type}" \
                --data-binary @"$asset" \
                "${upload_url}?name=${encoded_name}"
            fi
          done